#ifndef __GAMEPLAY_H
#define __GAMEPLAY_H

#include <libdragon.h>

#include <t3d/t3d.h>
#include <t3d/t3dmath.h>
#include <t3d/t3dmodel.h>
#include <t3d/t3danim.h>

#include <memory>
#include <vector>

#include "../../../core.h"
#include "../../../minigame.h"

#include "constants.hpp"
#include "wrappers.hpp"
#include "bullet.hpp"
#include "player.hpp"
#include "map.hpp"
#include "gamestate.hpp"

// Same range as analog input, max value that can be generated by the controller
constexpr float ForceLimit = 60.f;
constexpr float PlayerInvMass = 10;
constexpr float SpeedLimit = 80.f;
constexpr float BulletOffset = 15.f;

class GameplayController
{
    private:
        // Resources
        BulletController bulletController;
        U::T3DModel model;
        U::T3DModel shadowModel;

        // Player data
        std::vector<PlayerOtherData> playerOtherData;
        std::vector<PlayerGameplayData> playerGameplayData;

        // Player calculations
        void simulatePhysics(PlayerGameplayData &gameplayData, PlayerOtherData &other, uint32_t id, float deltaTime);
        void handleActions(PlayerGameplayData &gameplayData, uint32_t id, GameState &state);
        void renderPlayer(PlayerGameplayData &gameplayData, PlayerOtherData &other, uint32_t id, T3DViewport &viewport, float deltaTime);
        void renderPlayerUI(PlayerGameplayData &playerGameplay, PlayerOtherData &playerOther, uint32_t id);

        void checkGameFinished(GameState &state, std::array<bool, PlayerCount> &playerHitStatus);
    public:
        GameplayController(std::shared_ptr<MapRenderer> map);
        void updateState(GameState state);
        void render(float deltaTime, T3DViewport &viewport, GameState &state);
        void renderUI();
        void fixedUpdate(float deltaTime, GameState &state);
};

#endif // __GAMEPLAY_H